"""Collecting and reporting statistics on the states of the simulation."""

from __future__ import annotations

import os
from pathlib import Path
import bz2
import dill as pickle

import numpy as np
import pandas as pd

from ..egret.time_manager import VaticTime
from .formulations import RucModel, ScedModel


class StatsManager:
    """Processing statistics generated by solved simulation models.

    This class consolidates data produced by the unit commitment and economic
    dispatch models solved as part of a simulation run and produces reports
    in the form of data tables saved to file as well as plots.

    See prescient.simulator.reporting_manager
    and prescient.simulator.stats_manager for the original implementations of
    the functionalities included in this class.
    """

    def __init__(self,
                 write_dir: Path | str | None,
                 output_detail: int, verbosity: int, output_max_decimals: int,
                 create_plots: bool, save_to_csv: bool,
                 last_conditions_file: str | Path) -> None:
        self._sced_stats = dict()
        self._ruc_stats = dict()

        self.write_dir = write_dir
        self.output_detail = output_detail
        self.verbosity = verbosity
        self.max_decimals = output_max_decimals
        self.create_plots = create_plots
        self.save_to_csv = save_to_csv

        if last_conditions_file:
            self.last_conditions_file = Path(last_conditions_file)
        else:
            self.last_conditions_file = None

        if self.write_dir is None and create_plots:
            raise ValueError("Cannot create plots without providing an "
                             "output directory for saving them!")

        if self.write_dir is not None:
            os.makedirs(self.write_dir, exist_ok=True)

            if self.create_plots:
                os.makedirs(Path(self.write_dir, "plots"), exist_ok=True)

    def _dict_to_frame(self, stats: dict[tuple[str, int], int | float]):
        return pd.Series(stats).unstack().round(self.max_decimals)

    def collect_ruc_solution(self,
                             time_step: VaticTime,
                             ruc: RucModel) -> None:
        """Gets the key statistics from a solved reliability unit commitment.

        Args
        ----
            time_step   The time in the simulation at which the RUC was solved.
            ruc         The solved RUC model.
        """

        ruc_stats = {
            'runtime': ruc.solve_time,
            'fixed_cost': self._dict_to_frame(ruc.results['commitment_cost']),
            'variable_cost': self._dict_to_frame(
                ruc.results['production_cost']),

            'generation': self._dict_to_frame(ruc.results['power_generated']),
            'commitments': self._dict_to_frame(ruc.results['commitment']),
            'reserves': self._dict_to_frame(ruc.results['reserves_provided']),
            }

        if self.verbosity > 0:
            print("Fixed costs:    %12.2f" % new_ruc_data['fixed_costs'])
            print("Variable costs: %12.2f" % new_ruc_data['variable_costs'])
            print("")

        self._ruc_stats[time_step] = new_ruc_data
